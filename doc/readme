实战java高并发程序设计.doc

1.同步synchronous和异步asynchronous
同步和异步通常来形容一次方法的调用。同步方法调用一开始，调用者必须等到方法调用返回后，才能继续后续行为。
异步方法更像是一个消息传递，一旦开始，无需等待,方法调用就会立即返回。
2.并发concurrency和并行
并发和并行都可以表示两个或多个任务可以一起执行，但是侧重不同，并发侧重于多个任务交替执行，而多个任务之间有可能还是串行的，并非真正意义上的同时执行。
3.临界区
临界区用来表示一种公共资源或者说共享数据。可以被多个线程使用，但是每一次只能有一个线程使用它，一但临界区资源被占用，其他线程想要使用这个资源就必须等待。
4阻塞blocking和非阻塞non-blocking
阻塞和非阻塞用来形容多线程之间的影响，比如一个线程占用一个临界区资源，其他所需要这个临界区资源的线程必须在这个临界区中等待，等待会导致线程挂起，这种情况就是
阻塞。
5.死锁deadlock，饥饿starvation和活锁livelock
饥饿是指某一个或多个线程因为某种原因无法获得所需要的索，导致一直无法执行，比如优先级太低，而比他高的优先级线程一直不断抢占它所需要的资源。

6.并发级别
a.阻塞
一个线程是阻塞的，那么在其他线程释放之前，当前线程无法继续执行。eg.使用synchronized或者重入索时，得到的就是阻塞的线程。
b无饥饿
如果线程之间有优先级,那么线程调度的时候会倾向于满足高优先级的线程。对于同一个资源分配，是不公平的
c无障碍
d无锁
e无等待

java并发的几个特性
原子性.
原子性是指一个操作是不可中断的,即使是多个线程一起执行的时候,一个操作一旦开始,就不会被其他线程干扰
可见性
可见性是指当一个线程修改了某一个共享变量的值的时候,其他线程是否能够立即知道这个更改.
volatile  synchronized Lock
有序性
指令重排

线程的生命周期
NEW RUNNABLE BLOCKED WAITING TIMED_WAITING TERMINATED
obj.wait obj.notify obj.notifyAll


Obj.wait()和Thread.sleep()都可以让线程等待若干时间,除了wait()方法可以被唤醒外,另一个主要区别就是wait()方法会释放目标对象的锁,而Thread.sleep()
方法不会释放任何资源。

等待线程结束(join)和谦让(yeild)

volatile 与java内存模型

线程组threadGroup

守护线程