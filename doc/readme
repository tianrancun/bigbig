实战java高并发程序设计.doc

1.同步synchronous和异步asynchronous
同步和异步通常来形容一次方法的调用。同步方法调用一开始，调用者必须等到方法调用返回后，才能继续后续行为。
异步方法更像是一个消息传递，一旦开始，无需等待,方法调用就会立即返回。
2.并发concurrency和并行
并发和并行都可以表示两个或多个任务可以一起执行，但是侧重不同，并发侧重于多个任务交替执行，而多个任务之间有可能还是串行的，并非真正意义上的同时执行。
3.临界区
临界区用来表示一种公共资源或者说共享数据。可以被多个线程使用，但是每一次只能有一个线程使用它，一但临界区资源被占用，其他线程想要使用这个资源就必须等待。
4阻塞blocking和非阻塞non-blocking
阻塞和非阻塞用来形容多线程之间的影响，比如一个线程占用一个临界区资源，其他所需要这个临界区资源的线程必须在这个临界区中等待，等待会导致线程挂起，这种情况就是
阻塞。
5.死锁deadlock，饥饿starvation和活锁livelock
饥饿是指某一个或多个线程因为某种原因无法获得所需要的索，导致一直无法执行，比如优先级太低，而比他高的优先级线程一直不断抢占它所需要的资源。

6.并发级别
a.阻塞
一个线程是阻塞的，那么在其他线程释放之前，当前线程无法继续执行。eg.使用synchronized或者重入索时，得到的就是阻塞的线程。
b无饥饿
如果线程之间有优先级,那么线程调度的时候会倾向于满足高优先级的线程。对于同一个资源分配，是不公平的
c无障碍
d无锁
e无等待

锁的两个特性 互斥 可见性

java并发的几个特性
原子性.
原子性是指一个操作是不可中断的,即使是多个线程一起执行的时候,一个操作一旦开始,就不会被其他线程干扰
可见性
可见性是指当一个线程修改了某一个共享变量的值的时候,其他线程是否能够立即知道这个更改.
volatile  synchronized Lock
有序性
指令重排

线程的生命周期
NEW RUNNABLE BLOCKED WAITING TIMED_WAITING TERMINATED
obj.wait obj.notify obj.notifyAll


Obj.wait()和Thread.sleep()都可以让线程等待若干时间,除了wait()方法可以被唤醒外,另一个主要区别就是wait()方法会释放目标对象的锁,而Thread.sleep()
方法不会释放任何资源。

等待线程结束(join)和谦让(yeild)
主线程挂起,执行当前线程。

volatile 与java内存模型
volatile关键字并不能保证线程安全,只能确保一个线程修改后,其他线程能够看到这个改动

线程组threadGroup

守护线程daemon
守护线程跟用户线程的唯一区别在于jvm的离开。当一个人java应用内只有守护线程时,java虚拟机就会自然退出。

线程安全与synchronized
1.指定对象加锁:对给定对象加锁,进入同步代码块前需要获得给定对象的锁
2.直接作用于实例方法:相当于对当前实例加锁,进入同步代码块前需要获得当前实例的锁
3.直接作用于静态方法:相当于对当前类加锁,进入同步代码块钱需要获得当前类的锁

ArrayList vector
hashMap currentHashMap

jdk 并发包
3.1.1 同步并发控制synchronized 功能扩展reentrantLock
public static ReentrantLock lock = mew ReentrantLock()
lock.lock
lock.unlock
中断功能lock.lockInterruptibly
锁申请等待限时tryLock(),tryLock(long time,TimeUnit unit)
公平锁mew ReentrantLock(ture)

3.1.2 reentrantLock的搭档Condition
Condition c = lock.newConditon()
c.await()使当前线程等待,同时释放当前锁,当其他线程使用signal()方法或者signalAll()时，线程会重新获得锁并继续执行。

3.1.3允许多个线程同时访问:信号量 semaphore
无论是内部锁synchronized还是重入锁reentrantLock,一次都只允许一个线程访问一个资源,而信号量却可以指定多个线程,同时访问某一个资源.

3.1.4 ReadWriteLock 读写分离锁
读读不互斥,读写互斥,写写互斥。
读远远大于写的情况性能提升明显。

3.1.5 倒计数器 CountDownLatch

3.1.6 循环栅栏 CyclicBarrier

3.1.7线程阻塞工具类: LockSupport

3.1.8 guava 限流rateLimiter
限流算法之漏桶算法和令牌桶算法
https://blog.csdn.net/fanrenxiang/article/details/80949079
漏桶算法:利用一个缓存区,当有请求进入系统时,无论请求速率如何,都现在缓存区中缓存,然后以固定的流速流出缓存区进行处理。

3.2.1
ExecutorService executor1= Executors.newFixedThreadPool(5);
ExecutorService executor2= Executors.newScheduledThreadPool(5);
ExecutorService executor3= Executors.newSingleThreadExecutor();
ExecutorService executor4= Executors.newCachedThreadPool();

3.2.2线程池拓展
ThreadPoolExecutor.beforeExecutor(Thread t,Runnable r)
ThreadPoolExecutor.after(Thread t,Runnable r)

3.2.3 分而治之框架ForkJoinPool

3.3.1 并发集合
ConcurrentHashMap
CopyOnWriteArrayList
ConcurrentLinkedQueue 线程安全的linkedList
BlockingQueue
ConcurrentSkipListMap

3.3.2 线程安全的HashMap

3.3.3有关list的线程安全
ArrayList与Vector都使用数组为内部实现
LinkedList使用链表的数据结构作为实现List

...skip...

4 提高锁性能：
4.1.1 减少锁持有时间
4.1.2 减少锁粒度
...

5.1
预加载单例模式
懒加载单例模式
双重锁懒加载模式
预加载+懒加载 利用内部类和类的初始化方式。
